// Imports
const dishes = require('../data/dishes-data')
const dataHas = require('../utils/dataHas')
const nextId = require('../utils/nextId')

// Checks if the desired dish id exists and sets the corresponding to the response.locals
// Sends a 404 error if the dish id does not exist
function dishExists (req, res, next) {
    // Dish id recieved from the request.params
    const { dishId } = req.params
    // Both the dish object and its index are found
    const foundDish = dishes.find((dish) => dish.id === dishId)
    const dishIndex = dishes.findIndex((dish) => dish.id === dishId)
    foundDish ? (
        // If found, the dish and its index are set to the response.locals
        res.locals.dish = foundDish, 
        res.locals.index = dishIndex, 
        next()
    ) : (
        // If not found, a 404 error is sent
        next({
            status: 404,
            message: `Dish id not found: ${dishId}`
        })
    )
}

// Check is the price property is valid
function priceValidatior (req, res, next) {
    // Receives the price property from the request.body
    const { data: { price } = {} } = req.body
        // If the price is an integer greater than 0, it clears the validator
        if (price > 0 && Number.isInteger(price)) {
            next()
        // If the price fails the validation, a 400 status is returned with a message explaining the properties of a valid price
        } else {
            next({
                status: 400, 
                message: `Dish must have a price that is an integer greater than 0`
            })
        }
 
}

// Checks if an ID is given. If an ID is given, checks if the id given matches the existing ID
function dishIdValidator (req, res, next) {
    // ID from the request.params
    const { dishId } = req.params
    // ID from the request.body
    const { data: { id } = {} } = req.body
    // If no ID is given in the body, the validator is cleared
    !id ? (
        next()
    ) : (
        // If a ID is given in the body, it is checked against the ID given in the params
        id === dishId ? (
            next()
        ) : (
            // If the IDs do not match, a 400 status is returned with a message explaining the mismatch.
            next({
                status: 400, 
                message: `Dish id does not match route id. Dish: ${id}, Route: ${dishId}`
            })
        )
    )
}

// Creates and adds a dish to the API
function create (req, res, next) {
    // Properties received from the request.body
    const { data: { name, description, price, image_url } = {} } = req.body
    // ID generated by nextId function
    const id = nextId()
    // Dish created from request.body properties
    const newDish = {
        id, 
        name, 
        description, 
        price, 
        image_url, 
    }
    // Dish added to the API
    dishes.push(newDish)
    // Confirmation sent to user
    res.status(201).json({ data: newDish})
}

// Retrieves a specific dish from the API
function read (req, res, next) {
    // Gets the dish object from the response.locals
    const dish = res.locals.dish
    // Responds with the dish object
    res.json({ data: dish })
}

// Updates a specific dish within the API
function update (req, res, next) {
    // Dish retrieved from response.locals
    const dish = res.locals.dish
    // Replacement data destructured from request.body
    const { data: { name, description, price, image_url } = {} } = req.body
    
    // Dish object updated
    dish.name = name
    dish.description = description
    dish.price = price
    dish.image_url = image_url

    // Dish object sent to user as confirmation
    res.json({ data: dish })
}

// Deleting an existing dish is not allowed, so there is no delete function.

// Retrieves all the dish objects from the API
function list (req, res, next) {
    res.json({ data: dishes})
}

// Functions exported with proper validation
module.exports = {
    create: [
        dataHas('name', 'Dish'), 
        dataHas('description', 'Dish'), 
        dataHas('price', 'Dish'), 
        dataHas('image_url', 'Dish'),
        priceValidatior, 
        create, 
    ],
    read: [
        dishExists, 
        read, 
    ],
    update: [
        dishExists,
        dishIdValidator, 
        dataHas('name', 'Dish'), 
        dataHas('description', 'Dish'), 
        dataHas('price', 'Dish'), 
        dataHas('image_url', 'Dish'),
        priceValidatior, 
        update,
    ],
    list,
}